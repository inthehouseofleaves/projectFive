{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","getGif","axios","url","method","responseType","params","q","state","userInput","api_key","limit","lang","then","results","data","setState","gifsArray","queryString","event","target","value","handleSubmit","preventDefault","handleClickClear","className","action","sr-only","htmlFor","onChange","this","type","placeholder","onClick","map","gifs","key","id","title","src","images","fixed_height","alt","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2SAqHeA,G,wDA7Gb,aAAe,IAAD,8BACZ,gBA2BFC,OAAS,WACPC,IAAM,CACJC,IAAK,uCACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNC,EAAG,EAAKC,MAAMC,UACdC,QAAS,mCACTC,MAAO,GACPC,KAAM,QAEPC,MAAK,SAACC,GACPA,EAAUA,EAAQC,KAAKA,KACvB,EAAKC,SAAS,CACZC,UAAWH,QA1CH,EAgDdI,YAAc,SAACC,GACb,EAAKH,SAAS,CACZP,UAAWU,EAAMC,OAAOC,SAlDd,EAuDdC,aAAe,SAACH,GACdA,EAAMI,iBACN,EAAKtB,SACL,EAAKe,SAAS,CACZP,UAAW,MA3DD,EAgEde,iBAAmB,WACjB,EAAKR,SAAS,CACZC,UAAW,MAhEb,EAAKT,MAAQ,CACXS,UAAW,GACXR,UAAW,IAJD,E,gEASO,IAAD,OAClBP,IAAM,CACJC,IAAK,uCACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNC,EAAG,OACHG,QAAS,mCACTC,MAAO,GACPC,KAAM,QAEPC,MAAK,SAACC,GACPA,EAAUA,EAAQC,KAAKA,KACvB,EAAKC,SAAS,CACZC,UAAWH,S,+BAiDf,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,WACb,+CAEA,yBAAKA,UAAU,aACb,0BAAMC,OAAO,SAASD,UAAU,UAC9B,2BAAOE,UAAQ,SAASC,QAAQ,WAChC,2BAAOC,SAAUC,KAAKZ,YAAaG,MAAOS,KAAKtB,MAAMC,UAAWsB,KAAK,OAAON,UAAU,SAASO,YAAY,cAC3G,4BAAQC,QAASH,KAAKR,aAAcK,UAAQ,SAASF,UAAU,UAA/D,YAIJ,yBAAKA,UAAU,gBACZK,KAAKtB,MAAMS,UAAUiB,KAAI,SAACC,GACzB,OACE,yBAAKC,IAAKD,EAAKE,GAAIZ,UAAU,OAC3B,4BAAKU,EAAKG,OACV,yBAAKC,IAAKJ,EAAKK,OAAOC,aAAatC,IAAKuC,IAAKP,EAAKG,aAM1D,yBAAKb,UAAU,eACb,4BAAQQ,QAASH,KAAKN,iBAAkBC,UAAU,SAAlD,UAGF,gCACE,2BAAG,uBAAGkB,KAAK,4BAAR,mC,GAxGGC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c44e2509.chunk.js","sourcesContent":["\nimport React, {Component} from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nclass App extends Component {\n\n  // CONSTRUCTOR\n  constructor() {\n    super();\n    this.state = {\n      gifsArray: [],\n      userInput: \"\",\n    };\n  }\n\n  // AXIOS\n  componentDidMount() {\n    axios({\n      url: \"https://api.giphy.com/v1/gifs/search\",\n      method: \"GET\",\n      responseType: \"json\",\n      params: {\n        q: \"juno\",\n        api_key: \"4aF1GacjvE51Uj4zvZN9CCLvBmHIO0Vy\",\n        limit: 18,\n        lang: \"en\"\n      },\n    }).then((results) => {\n      results = results.data.data;\n      this.setState({\n        gifsArray: results,\n      })\n    });\n  }\n\n  getGif = () => {\n    axios({\n      url: \"https://api.giphy.com/v1/gifs/search\",\n      method: \"GET\",\n      responseType: \"json\",\n      params: {\n        q: this.state.userInput,\n        api_key: \"4aF1GacjvE51Uj4zvZN9CCLvBmHIO0Vy\",\n        limit: 18,\n        lang: \"en\"\n      },\n    }).then((results) => {\n      results = results.data.data;\n      this.setState({\n        gifsArray: results,\n      })\n    });\n  }\n\n  // GRAB QUERY STRING\n  queryString = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n  }\n\n  // ON SUBMIT, SUBMIT QUERY STRING\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.getGif();\n    this.setState({\n      userInput: \"\",\n    })\n  }\n\n  // CLEAR SEARCH\n  handleClickClear = () => {\n    this.setState({\n      gifsArray: [],\n    })\n  }\n\n  // RENDER\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <h1>Giphy Generator</h1>\n          {/* SEARCH BAR */}\n          <div className=\"searchBar\">\n            <form action=\"submit\" className=\"submit\">\n              <label sr-only=\"search\" htmlFor=\"search\"></label>\n              <input onChange={this.queryString} value={this.state.userInput} type=\"text\" className=\"search\" placeholder=\"i.e. Cats\" />\n              <button onClick={this.handleSubmit} sr-only=\"submit\" className=\"submit\">Submit</button>\n            </form>\n          </div>\n          {/* GIF CONTAINER */}\n          <div className=\"gifContainer\">\n            {this.state.gifsArray.map((gifs) => {\n              return (\n                <div key={gifs.id} className=\"gif\">\n                  <h2>{gifs.title}</h2>\n                  <img src={gifs.images.fixed_height.url} alt={gifs.title} />\n                </div>\n              );\n            })}\n          </div>\n          {/* CLEAR BUTTON */}\n          <div className=\"clearButton\">\n            <button onClick={this.handleClickClear} className=\"clear\">Clear</button>\n          </div>\n          {/* FOOTER */}\n          <footer>\n            <p><a href=\"https://junocollege.com/\">Created at Juno College</a></p>\n          </footer>\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}